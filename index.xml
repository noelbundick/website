<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Noel Bundick</title><link>/</link><description>Recent content on Noel Bundick</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Thu, 14 Oct 2021 00:00:00 +0000</lastBuildDate><atom:link href="/index.xml" rel="self" type="application/rss+xml"/><item><title>Optimizing Rust container builds</title><link>/gists/optimizing-rust-container-builds/</link><pubDate>Thu, 14 Oct 2021 00:00:00 +0000</pubDate><guid>/gists/optimizing-rust-container-builds/</guid><description>Optimizing Rust container builds ðŸ”—I&amp;rsquo;m a Rust newbie, and one of the things that I&amp;rsquo;ve found frustrating is that the default docker build experience is extremely slow. As it downloads crates, then dependencies, then finally my app - I often get distracted, start doing something else, then come back several minutes later and forget what I was doing
Recently, I had the idea to make it a little better by combining multistage builds with some of the amazing features from BuildKit.</description></item><item><title>WSL2 container development with Moby</title><link>/gists/wsl2-container-development-with-moby/</link><pubDate>Sun, 19 Sep 2021 00:00:00 +0000</pubDate><guid>/gists/wsl2-container-development-with-moby/</guid><description>WSL2 container development with Moby ðŸ”—Building, pulling, pushing, and running containers is something many developers do often without even thinking. Most of my development over the past couple of years has been exclusively in a Linux environment, specifically WSL2.
Even prior to the recent licensing changes to Docker Desktop, I found myself increasingly as an engineer whose workflow didn&amp;rsquo;t line up with my tools. I never used the GUI features. I never built Windows containers.</description></item><item><title>RDP from WSL</title><link>/gists/rdp-from-wsl/</link><pubDate>Tue, 17 Dec 2019 00:00:00 +0000</pubDate><guid>/gists/rdp-from-wsl/</guid><description>This was an experiment in WSL interop from way back in May 2018. My goal was to be able to type noel-pc123 from a bash terminal and immediately launch into an RDP session. Should still work!
msrdp-template.rdp ðŸ”— This file is used with mstsc.exe to launch a remote desktop session This file must be encoded as UTF-16 Replace the following values with your own: DOMAIN\user: the credentials you will use for your connection mygateway.</description></item><item><title>How to use Docker build secrets</title><link>/gists/how-to-use-docker-build-secrets/</link><pubDate>Fri, 28 Jun 2019 00:00:00 +0000</pubDate><guid>/gists/how-to-use-docker-build-secrets/</guid><description>How to use Docker build secrets ðŸ”—It&amp;rsquo;s common to need access to secret data to fully build an application from scratch. Commonly, builds pull sources or binaries from a private repository that requires authentication - private PyPI, npm, NuGet, etc. It&amp;rsquo;s also common to use a Dockerfile to perform application build and packaging when deploying apps as containers, to take advantage of an isolated environment. This presents a challenge, as we don&amp;rsquo;t want any secrets (files, environment variables, etc) to be captured in our image layers.</description></item><item><title>Consuming packages from a private Azure Pipelines Python artifact feed</title><link>/gists/consuming-packages-from-a-private-azure-pipelines-python-artifact-feed/</link><pubDate>Wed, 12 Jun 2019 00:00:00 +0000</pubDate><guid>/gists/consuming-packages-from-a-private-azure-pipelines-python-artifact-feed/</guid><description>Consuming Azure Pipelines Python artifact feeds in Docker ðŸ”—Recently, I was building out a set of Python packages and services and needed to find a way to pull down packages from an Azure Artifacts feed into a Docker image. It was straightforward to use the tasks to package an artifact, authenticate to the feed, and publish.
I had to do a bit more digging to piece together a flow I was comfortable with for building container images.</description></item><item><title>Gists as a content management system</title><link>/gists/gists-as-a-content-management-system/</link><pubDate>Sun, 13 Jan 2019 00:00:00 +0000</pubDate><guid>/gists/gists-as-a-content-management-system/</guid><description>GitHub Gists as a content management system ðŸ”—I often use GitHub Gists to jot down quick snippets to share. Lately, I&amp;rsquo;ve also tried to make sure an add a proper README (and a LICENSE!) - partially so that readers have some context on what they&amp;rsquo;re looking at, but also so I can remember what the heck I was doing when I wrote whatever code I&amp;rsquo;ve slung out there.
Gists are horrible for discoverability, and I always forget the neat things I&amp;rsquo;ve hacked together.</description></item><item><title>Azure Function w/ User Assigned Identity</title><link>/gists/azure-function-w--user-assigned-identity/</link><pubDate>Sat, 12 Jan 2019 00:00:00 +0000</pubDate><guid>/gists/azure-function-w--user-assigned-identity/</guid><description>Azure utility functions ðŸ”—What is this? ðŸ”—It&amp;rsquo;s an ARM template and an Azure Function App (https://github.com/noelbundick/azure-utilities) that I use as a base for doing interesting things in Azure. Ex: Start a VM from a Chrome bookmark, spin up Azure Container Instances as Azure DevOps build agents on-demand, etc. Cleanup resource groups on a timer trigger, etc.
It uses User Assigned Identity so I don&amp;rsquo;t have to juggle certs or Service Principal credentials</description></item><item><title>Secure code execution via ARM template and Azure Container Instances</title><link>/gists/secure-code-execution-via-arm-template-and-azure-container-instances/</link><pubDate>Sat, 15 Dec 2018 00:00:00 +0000</pubDate><guid>/gists/secure-code-execution-via-arm-template-and-azure-container-instances/</guid><description>Secure code execution via ARM template and Azure Container Instances ðŸ”—What is this? ðŸ”—It&amp;rsquo;s a template to execute authenticated az commands from an ARM template deployment, without storing or passing credentials of any kind
Why did you make it? ðŸ”—I was recently looking to move my blog from Azure Web Apps to a static site hosted on Azure Storage.
I wanted to have an ARM template so I can stand up other sites / use as a reference, etc.</description></item><item><title>azure-redis-cli</title><link>/gists/azure-redis-cli/</link><pubDate>Mon, 10 Dec 2018 00:00:00 +0000</pubDate><guid>/gists/azure-redis-cli/</guid><description>azure-redis-cli ðŸ”—redis-cli + stunnel for easy connectivity to Azure Cache for Redis
TLDR ðŸ”—docker run --rm -it acanthamoeba/azure-redis-cli &amp;lt;cache_name&amp;gt; &amp;lt;key&amp;gt; Detailed Usage ðŸ”—# Swap these vars as needed REDIS=noel RG=redis # Get key KEY=$(az redis list-keys -n $REDIS -g $RG --query &amp;#39;primaryKey&amp;#39; -o tsv) # Launch redis-cli docker run --rm -it acanthamoeba/azure-redis-cli $REDIS $KEY Extra credit ðŸ”—Add this to your .bashrc/.zshrc
function azure-redis-cli() { REDIS=$1 RG=$(az redis list --query &amp;#39;[?</description></item><item><title>Resize Azure Cloud Shell storage</title><link>/gists/resize-azure-cloud-shell-storage/</link><pubDate>Mon, 10 Dec 2018 00:00:00 +0000</pubDate><guid>/gists/resize-azure-cloud-shell-storage/</guid><description>Resize Azure Cloud Shell storage ðŸ”—I found myself wanting to resize the amount of storage I had allocated to Azure Cloud Shell, and I wanted to script this out in a repeatable way, as I use various test accounts. It&amp;rsquo;s pretty easy to go hunt down the storage account &amp;amp; set the quota, but this lets me run something once from inside the shell.azure.com itself and skip the lookups / trips to the portal</description></item><item><title>Azure Container Instances as SOCKS proxy</title><link>/gists/azure-container-instances-as-socks-proxy/</link><pubDate>Fri, 30 Nov 2018 00:00:00 +0000</pubDate><guid>/gists/azure-container-instances-as-socks-proxy/</guid><description>Azure Container Instances as SOCKS proxy ðŸ”—Sometimes it&amp;rsquo;s useful to originate traffic from a specific region - etc to test global load balancers, DNS, etc. A common way to do this is to SSH to some remote VPN service or VM, then forward your traffic through that remote endpoint.
You can also use this to watch Netflix outside of your current country while traveling abroad :P
Azure Container Instances are a quick &amp;amp; easy way to do this as well - launch the ssh daemon in a container, expose port 22, and start forwarding traffic!</description></item><item><title>Locust on Azure Container Instances</title><link>/gists/locust-on-azure-container-instances/</link><pubDate>Wed, 06 Jun 2018 00:00:00 +0000</pubDate><guid>/gists/locust-on-azure-container-instances/</guid><description>Running Distributed Locust on Azure Container Instances ðŸ”—Locust is an open source load testing tool that can be run inside a container
Below is how I got Locust up and running on Azure Container Instances
Note: I prefer head/workers, controller/nodes, etc, but I&amp;rsquo;ve used master/slave for clarity &amp;amp; consistency with the Locust docs in this doc
Design ðŸ”— Single master container 3x slave containers These communicate with the master over a public IP &amp;amp; DNS name Azure File share to upload locustfiles, which are accessed by containers Basics ðŸ”—Create a resource group &amp;amp; a storage account with a sample locustfile</description></item><item><title>Register w/ Cloudflare DNS</title><link>/gists/register-w--cloudflare-dns/</link><pubDate>Mon, 28 May 2018 00:00:00 +0000</pubDate><guid>/gists/register-w--cloudflare-dns/</guid><description>Dynamic DNS w/ Cloudflare + PowerShell + Windows Scheduled Tasks ðŸ”—Copy registerCloudflare.ps1 to C:\tools\registerCloudflare.ps1
Scheduled Task ðŸ”—Pick a Trigger that makes sense for you. Some examples:
At computer startup Every 6 hours When connecting to the network Use the following for Actions
Program/script: C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe -Command &amp;#34;&amp;amp; &amp;#39;C:\tools\registerCloudflare.ps1&amp;#39; -Email &amp;#39;user@example.com&amp;#39; -ApiKey &amp;#39;XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX&amp;#39; -Domain &amp;#39;example.com&amp;#39; -Name &amp;#39;myfriendlyname&amp;#39;&amp;#34;</description></item><item><title>aci-compose</title><link>/gists/aci-compose/</link><pubDate>Fri, 04 May 2018 00:00:00 +0000</pubDate><guid>/gists/aci-compose/</guid><description>aci-compose ðŸ”—I learned today that requestb.in had shut down. Their GitHub repo told me I could run it myself &amp;amp; gave me instructions for Heroku.
I thought it would be neat to be able to use a docker-compose file &amp;amp; deploy it to Azure Container Instances. This 20 minutes of hacking gave me something fun
# Create a resource group az group create -n requestbin -l eastus # Run aci-compose # Usage: aci-compose {compose_yaml_path} {resource_group_name} {dns_prefix} .</description></item><item><title>Serverless VSTS Build Agents with Azure Container Instances</title><link>/posts/serverless-vsts-build-agents-with-azure-container-instances/</link><pubDate>Sun, 22 Apr 2018 00:00:00 +0000</pubDate><guid>/posts/serverless-vsts-build-agents-with-azure-container-instances/</guid><description>Serverless VSTS Build Agents with Azure Container Instances ðŸ”—Every software project is different, and may rely on wildly different dependencies at build time. Package managers make this go away most of the time, but sometimes there are things you need installed at the OS level to build or run.
Visual Studio Team Services (VSTS) is a great tool that can run your automated builds and offers Hosted Agents where there&amp;rsquo;s quite a bit of useful tooling already installed (check the Linux Dockerfile here).</description></item><item><title>Frankenetes TLS</title><link>/gists/frankenetes-tls/</link><pubDate>Mon, 19 Mar 2018 00:00:00 +0000</pubDate><guid>/gists/frankenetes-tls/</guid><description>Frankenetes TLS overview ðŸ”— Define what certs I want in the tls directory
ca-config.json defines my Certificate Authority Individual -csr.json files represent individual certs / Kubernetes user accounts All certs are signed by the CA, which allows the k8s api server to trust their authenticity CN= corresponds to a k8s user O= corresponds to a k8s group. There can be multiple I use az storage file upload-batch to put my configuration &amp;amp; create-certs.</description></item><item><title>Cross-compiling Kubernetes on Windows Subsystem for Linux</title><link>/posts/cross-compiling-kubernetes-on-windows-subsystem-for-linux/</link><pubDate>Sat, 10 Mar 2018 00:00:00 +0000</pubDate><guid>/posts/cross-compiling-kubernetes-on-windows-subsystem-for-linux/</guid><description>Over the last year, I&amp;rsquo;ve gone from Linux n00b to a growing level of competence. In large part, this is thanks to Windows Subsystem for Linux, where I could learn and take advantage of command line tooling without being completely lost in an unfamiliar ecosystem. It also gave me an easy way to exit vim!
That said, I&amp;rsquo;m always interested to push the limits on things. After Brian Ketelsen&amp;rsquo;s recent post about WSL metadata, and some good conversation on Twitter, I was reminded that I had cross-compiled Kubernetes for Windows under WSL a while back, and had never shared how to repeat this feat of nerdery for others.</description></item><item><title>Using OpenSSH Server as a Tunnel on Windows</title><link>/posts/using-openssh-server-as-a-tunnel-on-windows/</link><pubDate>Fri, 02 Mar 2018 00:00:00 +0000</pubDate><guid>/posts/using-openssh-server-as-a-tunnel-on-windows/</guid><description>Confession: Windows 10 is a great operating system, and it&amp;rsquo;s my primary both at work and at home, but I don&amp;rsquo;t always use Windows. I&amp;rsquo;ve made a conscious decision to use Linux as a host OS on occasion so that I can learn its ins and outs, which helps me solve problems for customers, makes me more productive in the cloud, helps me troubleshoot fiddly devices at home, etc.
But sometimes, I have a problem - I need to be able to access computers on the corporate network, and the RDP Gateway server I&amp;rsquo;ve been using doesn&amp;rsquo;t seem to be supported anymore.</description></item><item><title>Frankenetes! Serverless Kubernetes</title><link>/posts/frankenetes-serverless-kubernetes/</link><pubDate>Sat, 24 Feb 2018 00:00:00 +0000</pubDate><guid>/posts/frankenetes-serverless-kubernetes/</guid><description>In a recent post, I showed how it was possible to run the Kubernetes control plane components on Azure Container Instances. The cloud moves fast, and there have been some great improvements to ACI in the last month. In keeping up with the times, I&amp;rsquo;ve upgraded Frankenetes from just a virtual control plane to a full-blown virtual cluster! Look out, hacks incoming!
Check out the code on GitHub: https://github.com/noelbundick/frankenetes</description></item><item><title>Running Windows Containers with Volumes on Azure Service Fabric</title><link>/posts/running-windows-containers-with-volumes-on-azure-service-fabric/</link><pubDate>Sat, 10 Feb 2018 15:56:10 +0000</pubDate><guid>/posts/running-windows-containers-with-volumes-on-azure-service-fabric/</guid><description>Containers are rapidly becoming the de-facto choice for application packaging, distribution, and execution in the cloud. This newfound flexibility brings new challenges, particularly with stateful workloads like databases. With the advent of container orchestrators, it&amp;rsquo;s no longer a safe assumption that the underlying data for your server is already directly connected to your host. Nodes fail and are dynamically scaled, but your app still needs its data.
Azure Service Fabric is a distributed systems platform that added support for containers a while back.</description></item><item><title>Using the Azure IoT DevKit with Linux</title><link>/posts/using-the-azure-iot-devkit-with-linux/</link><pubDate>Sat, 27 Jan 2018 20:22:46 +0000</pubDate><guid>/posts/using-the-azure-iot-devkit-with-linux/</guid><description>For a while now, I&amp;rsquo;ve had an interest in playing with IoT devices to do interesting things. I consider myself a novice (at best) with electronic components, so I wanted an all-in-one unit to get started. I recently borrowed an Azure IoT DevKit, which has lots of interesting little sensors on board, and a lot of getting started resources.
More precisely, this is a MXChip AZ1366
The Problem ðŸ”—I&amp;rsquo;ve been running Ubuntu 16.</description></item><item><title>Frankenetes! Running the Kubernetes control plane on Azure Container Instances</title><link>/posts/frankenetes-running-the-kubernetes-control-plane-on-azure-container-instances/</link><pubDate>Sun, 21 Jan 2018 23:02:43 +0000</pubDate><guid>/posts/frankenetes-running-the-kubernetes-control-plane-on-azure-container-instances/</guid><description>I&amp;rsquo;ve been learning more about Kubernetes lately - both how to use it, and how it works. I recently took the time to run through Kelsey Hightower&amp;rsquo;s Kubernetes the Hard Way, specifically, the Azure version by Ivan Fioravanti. In addition to learning a lot, it sparked some interesting ideas on my flight home&amp;hellip;
My thought was that these are just apps, processes, binaries that run with flags - boring. Boring is good!</description></item><item><title>My On-Demand Azure Dev Box</title><link>/posts/my-on-demand-azure-dev-box/</link><pubDate>Mon, 13 Nov 2017 19:25:38 +0000</pubDate><guid>/posts/my-on-demand-azure-dev-box/</guid><description>I&amp;rsquo;m always tinkering with things and trying to automate away common things that become annoying. I&amp;rsquo;m also on the lookout to be a good steward of my company&amp;rsquo;s resources. And I certainly don&amp;rsquo;t want to spend any of my own money! To those ends - I&amp;rsquo;ve assembled some useful hacks that let me quickly access my Azure VMs on demand. It started out as a fun experiment of what&amp;rsquo;s possible and turned into something I use on a daily basis across all my computers.</description></item><item><title>Quick tip - Deploying ARM Templates from a URL</title><link>/posts/deploying-arm-templates-from-a-url/</link><pubDate>Mon, 07 Aug 2017 07:30:04 +0000</pubDate><guid>/posts/deploying-arm-templates-from-a-url/</guid><description>tl;dr version ðŸ”—Use something like following to create a new deployment from an ARM template URL
&amp;lt;!-- Make sure to URI encode the template file location! --&amp;gt; &amp;lt;a href=&amp;#34;https://portal.azure.com/#create/Microsoft.Template/uri/https%3A%2F%2Fraw.githubusercontent.com%2Fnoelbundick%2Farm-samples%2Fmaster%2F1-storageaccount%2Ftemplate.json&amp;#34;&amp;gt;Deploy to Azure&amp;lt;/a&amp;gt; OR
let armTemplateUri = &amp;#39;https://raw.githubusercontent.com/noelbundick/arm-samples/master/1-storageaccount/template.json&amp;#39;; let deployLink = `https://portal.azure.com/#create/Microsoft.Template/uri/${encodeURIComponent(armTemplateUri)}`; window.location = deployLink; Explanation ðŸ”—Often enough, I find myself with an ARM template that I want to share with a teammate or customer so they can test it out or deploy into their own subscription.</description></item><item><title>Fun with Azure Container Instances</title><link>/posts/fun-with-azure-container-instances/</link><pubDate>Thu, 03 Aug 2017 17:32:39 +0000</pubDate><guid>/posts/fun-with-azure-container-instances/</guid><description>Fun with Azure Container Instances ðŸ”—Azure Container Instances were recently announced, making it easy for developers to spin up a container on-demand without having to provision and maintain a VM or a cluster. It&amp;rsquo;s been well received by the community, and there are already a ton of great resources to help you get started.
But that&amp;rsquo;s not what this post is about! ðŸ”—Truthfully, I can only sit through so many canned docker run nginx demos.</description></item><item><title>Learning Azure Resource Manager - Introduction</title><link>/posts/learning-azure-resource-manager-introduction/</link><pubDate>Fri, 14 Jul 2017 11:16:47 +0000</pubDate><guid>/posts/learning-azure-resource-manager-introduction/</guid><description>Check out the accompanying repo: https://github.com/noelbundick/arm-samples
Introduction ðŸ”—When I joined my current team a few months back, one of the first pieces of advice I received was &amp;ldquo;Use the Azure Portal to look at things, but make all your changes with the CLI or an ARM template&amp;rdquo;. That has turned out to be great advice, and I now give the same advice to everyone who&amp;rsquo;s serious about becoming an Azure expert.</description></item><item><title>Importing Certificates to Key Vault</title><link>/posts/importing-certificates-to-key-vault/</link><pubDate>Tue, 13 Jun 2017 16:19:09 +0000</pubDate><guid>/posts/importing-certificates-to-key-vault/</guid><description>I&amp;rsquo;ve found that creating a secure Service Fabric cluster can be a challenge - primarily because of the required interaction with Key Vault. In my Service Fabric Cluster Quickstart post, I shared how the latest Azure PowerShell updates make it much easier to get up and running. That works great for dev clusters, but you&amp;rsquo;ll really want to use an ARM template for any production environments so you can reap the benefits of repeatable declarative deployments.</description></item><item><title>Draft on Azure Container Service</title><link>/posts/draft-on-azure-container-service/</link><pubDate>Wed, 31 May 2017 12:22:12 +0000</pubDate><guid>/posts/draft-on-azure-container-service/</guid><description>Draft is a tool designed to streamline development on Kubernetes, announced today. Sounds pretty useful to me - it looks like it could make it easy for developers to take advantage of Kubernetes without having to dive in and learn all the internals up front. Or for those who are already familiar with k8s - it could save some keystrokes, which I&amp;rsquo;m all for.
With that in mind, I thought it might be useful to try it out myself, and capture my step-by-step instructions as a guide for anyone else who wants to try it out.</description></item><item><title>Using Postman with Azure REST APIs</title><link>/posts/using-postman-with-azure-rest-apis/</link><pubDate>Tue, 23 May 2017 10:09:44 +0000</pubDate><guid>/posts/using-postman-with-azure-rest-apis/</guid><description>Azure has a plethora of APIs to interact with, and a lot of them have friendly wrappers via the Azure Portal, CLI or PowerShell cmdlets. But sometimes, I want to interact with services on a more detailed level, or try out newer API versions than the current tooling allows for.
Postman is an awesome tool for interacting directly with APIs. Unfortunately, dealing with authorization isn&amp;rsquo;t always straightforward. I&amp;rsquo;ve compiled some of my recent hacking around with the hope that it will save you some pain and help you get you started.</description></item><item><title>Bash on Windows + Azure Cloud Shell Quickstart</title><link>/posts/bash-on-windows-azure-cloud-shell-quickstart/</link><pubDate>Sun, 14 May 2017 14:49:56 +0000</pubDate><guid>/posts/bash-on-windows-azure-cloud-shell-quickstart/</guid><description>In a previous post, I shared some info on how to connect to your Azure Cloud Shell shared drive, with a particular focus on Bash on Windows. I thought to myself, &amp;ldquo;How can I make this even easier?&amp;rdquo;
Here&amp;rsquo;s how to get started in just two commands!
TL;DR version - run this ðŸ”—# Run the setup script curl https://gist.githubusercontent.com/noelbundick/f03200a4387b4bf4d3eed2d97169fc89/raw/738c3417a2513847dc71dabb844c395616831de9/setupclouddrive.sh | bash # Run the created mount script ~/.mountclouddrive.sh Long Explanation ðŸ”—Make sure that you&amp;rsquo;ve already gone through the Cloud Shell setup for your selected subscription.</description></item><item><title>Supercharging the Azure Cloud Shell</title><link>/posts/supercharging-the-azure-cloud-shell/</link><pubDate>Sat, 13 May 2017 14:36:02 +0000</pubDate><guid>/posts/supercharging-the-azure-cloud-shell/</guid><description>Azure Cloud Shell, recently announced at Build, is an awesome new way to manage your Azure resources. In a nutshell, it&amp;rsquo;s a hosted terminal session you can access from anywhere using your browser. And it&amp;rsquo;s already got most of the basic tools you&amp;rsquo;ll typically need for interacting with your Azure websites, VMs, Kubernetes clusters, and so on.
As I&amp;rsquo;ve been using it more often, I&amp;rsquo;ve found myself wanting a few files I already had locally - ssh keys, helper scripts, and the like.</description></item><item><title>Service Fabric Cluster Quickstart</title><link>/posts/service-fabric-cluster-quickstart/</link><pubDate>Fri, 12 May 2017 12:22:27 +0000</pubDate><guid>/posts/service-fabric-cluster-quickstart/</guid><description>With the latest round of updates released at Build 2017, Service Fabric has become more powerful than ever, and getting started is now a breeze. This quick guide will help you get started with a secure Service Fabric cluster that you can start tinkering with.
Prerequisites ðŸ”— Azure subscription Azure PowerShell TL;DR install: run Install-Module AzureRM in a PowerShell window Creating a cluster ðŸ”—Get started with a new PowerShell window.</description></item><item><title>Getting Started - Bash on Windows</title><link>/posts/getting-started-bash-on-windows/</link><pubDate>Mon, 08 May 2017 18:00:00 +0000</pubDate><guid>/posts/getting-started-bash-on-windows/</guid><description>New job, new blog, new dev box, new&amp;hellip; shell? Why not!
I&amp;rsquo;m spending more and more time with Bash on Windows / Windows Subsystem for Linux lately, and I&amp;rsquo;m loving it! My background to date has been mostly app development &amp;amp; Windows sysadmin, so Bash is new to me. Turns out, it runs great on Windows 10 Creators Update - quirks and all. Having recently set up a new box, I thought I&amp;rsquo;d share some tips and tasks that I would have appreciated when I got started.</description></item></channel></rss>