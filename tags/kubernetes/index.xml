<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>kubernetes on Noel Bundick</title><link>/tags/kubernetes/</link><description>Recent content in kubernetes on Noel Bundick</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sat, 10 Mar 2018 00:00:00 +0000</lastBuildDate><atom:link href="/tags/kubernetes/index.xml" rel="self" type="application/rss+xml"/><item><title>Cross-compiling Kubernetes on Windows Subsystem for Linux</title><link>/posts/cross-compiling-kubernetes-on-windows-subsystem-for-linux/</link><pubDate>Sat, 10 Mar 2018 00:00:00 +0000</pubDate><guid>/posts/cross-compiling-kubernetes-on-windows-subsystem-for-linux/</guid><description>Over the last year, I&amp;rsquo;ve gone from Linux n00b to a growing level of competence. In large part, this is thanks to Windows Subsystem for Linux, where I could learn and take advantage of command line tooling without being completely lost in an unfamiliar ecosystem. It also gave me an easy way to exit vim!
That said, I&amp;rsquo;m always interested to push the limits on things. After Brian Ketelsen&amp;rsquo;s recent post about WSL metadata, and some good conversation on Twitter, I was reminded that I had cross-compiled Kubernetes for Windows under WSL a while back, and had never shared how to repeat this feat of nerdery for others.</description></item><item><title>Frankenetes! Serverless Kubernetes</title><link>/posts/frankenetes-serverless-kubernetes/</link><pubDate>Sat, 24 Feb 2018 00:00:00 +0000</pubDate><guid>/posts/frankenetes-serverless-kubernetes/</guid><description>In a recent post, I showed how it was possible to run the Kubernetes control plane components on Azure Container Instances. The cloud moves fast, and there have been some great improvements to ACI in the last month. In keeping up with the times, I&amp;rsquo;ve upgraded Frankenetes from just a virtual control plane to a full-blown virtual cluster! Look out, hacks incoming!
Check out the code on GitHub: https://github.com/noelbundick/frankenetes</description></item><item><title>Frankenetes! Running the Kubernetes control plane on Azure Container Instances</title><link>/posts/frankenetes-running-the-kubernetes-control-plane-on-azure-container-instances/</link><pubDate>Sun, 21 Jan 2018 23:02:43 +0000</pubDate><guid>/posts/frankenetes-running-the-kubernetes-control-plane-on-azure-container-instances/</guid><description>I&amp;rsquo;ve been learning more about Kubernetes lately - both how to use it, and how it works. I recently took the time to run through Kelsey Hightower&amp;rsquo;s Kubernetes the Hard Way, specifically, the Azure version by Ivan Fioravanti. In addition to learning a lot, it sparked some interesting ideas on my flight home&amp;hellip;
My thought was that these are just apps, processes, binaries that run with flags - boring. Boring is good!</description></item><item><title>Draft on Azure Container Service</title><link>/posts/draft-on-azure-container-service/</link><pubDate>Wed, 31 May 2017 12:22:12 +0000</pubDate><guid>/posts/draft-on-azure-container-service/</guid><description>Draft is a tool designed to streamline development on Kubernetes, announced today. Sounds pretty useful to me - it looks like it could make it easy for developers to take advantage of Kubernetes without having to dive in and learn all the internals up front. Or for those who are already familiar with k8s - it could save some keystrokes, which I&amp;rsquo;m all for.
With that in mind, I thought it might be useful to try it out myself, and capture my step-by-step instructions as a guide for anyone else who wants to try it out.</description></item></channel></rss>